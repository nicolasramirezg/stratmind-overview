# StratMind

Dynamic LLM-Based Architecture for Autonomous Task Decomposition and Hierarchical Intelligent Agent Generation

**StratMind** is a multi-agent system powered by LLMs (Large Language Models) for autonomously decomposing, refining, and executing complex tasks, generating structured task trees and results. The workflow covers everything from interactive task specification to execution and export of the full task tree.

---

## Main Features

- **Interactive Specification:** Clarify and detail tasks through a dialogue with a specialized agent.
- **Automatic Synthesis:** Summarize and formalize the clarified task and expected output.
- **Intelligent Decomposition:** Break down tasks into specialized functional areas using LLM agents.
- **Subtask Planning:** Generate concrete subtasks for each area, resolving dependencies and avoiding duplication.
- **Recursive Refinement:** Automatically refine ambiguous subtasks until they are executable.
- **Autonomous Execution:** Execute each subtask (via LLM or simulation), propagating results through the tree.
- **Structured Export:** Export the complete tree in JSON and TXT, ready for analysis or integration.
- **API and CLI:** Use interactively via CLI or integrate with other systems via a FastAPI backend.

---

## Project Structure

```
src/
  agents/           # LLM agents: specify, synthesize, decompose, specialist, refiner, executor
  utils/            # Task classes, exporters, serialization and prompt utilities
  prompts/          # Plain text prompts for each agent (editable for custom behavior)
  executor/         # Subtask execution logic
  APErefiner/       # Advanced iterative refiner (experimental)
main.py             # Interactive CLI runner
back.py             # FastAPI backend for web/API integration
output/             # Exported task trees (JSON/TXT)
requirements.txt    # Python dependencies
```

---

## Installation

1. **Clone the repository:**
   ```bash
   git clone <REPO_URL>
   cd agentLLM
   ```

2. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

3. **Set your OpenAI API Key:**
   - Create a `.env` file in the root directory with:
     ```
     OPENAI_API_KEY=your_key_here
     ```

---

## Usage

### Interactive Mode (CLI)

```bash
python main.py
```
- The system will guide you to specify, decompose, refine, and execute all subtasks.
- At the end, it exports the task tree to the `output/` directory.

### API Mode (FastAPI)

```bash
uvicorn back:app --reload
```
- Exposes endpoints for each pipeline stage (`/clarify`, `/synthesize`, `/decompose`, `/plan_subtasks`, `/refine`, `/execute`, etc.).
- Ideal for integration with web frontends or automation.
- Session-based: Each session tracks its own task tree and progress.

---

## Example Workflow

1. **Specification:**  
   The user describes the task and answers clarification questions.
2. **Synthesis:**  
   The system summarizes the task and expected output.
3. **Decomposition:**  
   The agent splits the task into functional areas.
4. **Planning:**  
   Each area generates concrete subtasks, resolving dependencies.
5. **Refinement:**  
   Ambiguous subtasks are recursively refined.
6. **Execution:**  
   Each subtask is executed (via LLM or simulation).
7. **Export:**  
   The task tree and results are exported in JSON and TXT.

---

## Credits

Developed by Nicolás Ramírez & Jorge Martin  
Universidad de Navarra  
Master in Big Data Science & AI

All rights reserved
No reuse or redistribution is permitted without explicit consent from the author.

